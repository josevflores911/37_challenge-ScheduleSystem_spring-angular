ng g c landing-page --skip-tests=true -m=landing-page
 ng g m landing-page --routing=true

----------------------------------------------------------------------------------------------
 npm install bootstrap
Then add the needed script file to apps[0].scripts in the angular.json file:

 "scripts": [
    "./node_modules/bootstrap/dist/js/bootstrap.bundle.min.js"
    ],
The above step is important for certain functionality to work such as the displaying of the dropdown menu.

Finally add the Bootstrap CSS file to the apps[0].styles array in the angular.json file:

"styles": [
    "styles.css",
    "./node_modules/bootstrap/dist/css/bootstrap.min.css"
    ],

-----------------------------------------------------------------
    this.http.get(`https://myapi.com/health`, {responseType: 'text'})
-------------------------
const newArr = [
  ...arr,
  "Salut",
];

-------------------------------------
/* export interface Agent {
    name?: string;
    image?: string;
} */

/* export interface Address {
    state?: string;
    description?: string;
} */

----------------------------------------------
  //post(save)
  /* public addUser(user:User):Observable<ResponseLogin>{
    const headers = new HttpHeaders({ 'Content-Type': 'application/json' });
    return this.http.post<User>(`${this.apiServerUrl}/login`,user,{ headers })
    .pipe(
      tap((loginResponse: ResponseLogin ) => (this.authService.loginResponse = loginResponse))
    );
  }  */

//return this.http.get(`${this.apiServerUrl}/patient/hello`, {responseType: 'text'});
  ----------------------------------------------------------------------------

  /*saveSport(payload: string, id: string) {

    const headers = new HttpHeaders();

    headers.set('Content-Type', 'application/json; charset=utf-8');

    const httpOptions = {
      headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
    };

    if (id === null || id === '') {
      return this.httpClient.post<SportsClass>(
        config.apiEndpoints.sport.save,
        payload,
        httpOptions
      );
    }

    return this.httpClient.put<SportsClass>(
      config.apiEndpoints.sport.updateById(id),
      payload,
      httpOptions
    )
  }*/

  ------------------------------------------------
 //date: string | undefined=new Date().toJSON().slice(0,10).replace(/-/g,'/');

=-------------------------------------------------------------------


<!-- 
<div *ngFor="let patient of patients" style="display:inline-block; background-color: blanchedalmond; margin: 30px">

<div style="display: block; background-color: red;  width: 20px; height: 20px;">{{patient.name}}</div>

<p-card header="Advanced Card" subheader="Card Subheader" [style]="{ width: '360px' }">
    <ng-template pTemplate="header">
        <img alt="Card" src="https://primefaces.org/cdn/primeng/images/usercard.png" />
    </ng-template>
    <p>
        Lorem ipsum dolor sit amet, consectetur adipisicing elit. Inventore sed consequuntur error repudiandae numquam deserunt quisquam repellat libero asperiores earum nam nobis, culpa ratione quam perferendis esse, cupiditate neque
        quas!
    </p>
    <ng-template pTemplate="footer">
        <p-button label="Save" icon="pi pi-check"></p-button>
        <p-button label="Cancel" icon="pi pi-times" styleClass="p-button-secondary" [style]="{ 'margin-left': '.5em' }"></p-button>
    </ng-template>
</p-card>
</div>

 -->
-------------------------------------------------------

<!--
  <nav>
  <a [routerLink]="['/home']" >Home</a>  
  <a routerLink="/register">Patients</a>  
  <a routerLink="/login">login</a>  
  <a routerLink="/schedule">schedule</a>  
</nav>
  
  <p-confirmDialog></p-confirmDialog> 
  <rang-toast></rang-toast>
  <div [class.router-container]="showHeader">
    
  </div>

 <div style="margin: 30px;">
  <app-patient></app-patient>
</div>

-->

--------------------------------------------bad code

  async getPatientScheduled() {

    let result: [{
      fullname: string,
      addressState: string,
      addressDescription: string,
      agentName: string,
      agentImage: string,
      register: any,
      age: string,
      status: string,
      department: string,
      date: any
    }] = [{
      fullname: "",
      addressState: "",
      addressDescription: "",
      agentName: "",
      agentImage: "",
      register: "",
      age: "",
      status: "",
      department: "",
      date: ''
    }];

    this.patients.map(p => {
      const matchingSchedule = this.schedules.find(s => s.patient.id === p.id);
      if (matchingSchedule) {
        return result.push({
          fullname: p.name + ' ' + p.lastName,
          addressState: p.address.state,
          addressDescription: p.address.description,
          agentName: p.agent.name,
          agentImage: p.agent.image,
          register: p.register,
          age: p.age,
          status: p.status,
          department: matchingSchedule.department,
          date: matchingSchedule.date
        });
      }
      return null;
    });
    
    const conversion = result.slice(1, result.length)

    conversion.map(el => {
      this.patientSchedules = [
        ...this.patientSchedules,
        new PatientSchedule(el.fullname, el.addressState, el.addressDescription,
          el.agentName, el.agentImage, el.register, el.age,
          el.status, el.department, el.date)
      ];


    })


  }



-------------------------------------------------not destructuring

async getPatientScheduled() {
  let result: {
    fullname: string;
    addressState: string;
    addressDescription: string;
    agentName: string;
    agentImage: string;
    register: any;
    age: string;
    status: string;
    department: string;
    date: any;
  }[] = [];

  this.patients.forEach((p) => {
    const matchingSchedule = this.schedules.find((s) => s.patient.id === p.id);
    if (matchingSchedule) {
      const fullName = p.name + ' ' + p.lastName;
      const addressState = p.address.state;
      const addressDescription = p.address.description;
      const agentName = p.agent.name;
      const agentImage = p.agent.image;
      const register = p.register;
      const age = p.age;
      const status = p.status;
      const department = matchingSchedule.department;
      const date = matchingSchedule.date;

      result.push({
        fullname: fullName,
        addressState: addressState,
        addressDescription: addressDescription,
        agentName: agentName,
        agentImage: agentImage,
        register: register,
        age: age,
        status: status,
        department: department,
        date: date,
      });
    }
  });

  // The rest of your code...
}
In this version, I've kept the result variable and avoided destructuring. Each property of the result objects is assigned explicitly, which may be less concise but maintains the structure you originally had in your code.













  https://www.youtube.com/watch?v=ULBJQxp-Vrk&t=331s
  https://www.youtube.com/watch?v=YUqi1IjLX8I